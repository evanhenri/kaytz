---
- name: Install apt dependencies
  apt:
    name: "{{ item }}"
    install_recommends: no
  with_items:
    - lxc
    - lxc-templates
  become: true

- name: Set /var/lib/lxc directory permissions
  file:
    path: "/var/lib/lxc"
    mode: 0755
    recurse: yes
    state: directory
  become: true

- name: Assign unpriveleged UID range
  command: usermod --add-subuid 100000-165536 {{ ansible_user }}
  become: true

- name: Assign unprivileged GID range
  command: usermod --add-subgid 100000-165536 {{ ansible_user }}
  become: true

- name: Copy /etc/lxc/default.conf
  template:
    src: "{{ role_path }}/files/default.conf"
    dest: /etc/lxc/default.conf
    mode: 0644
  become: true

- name: Copy /etc/default/lxc-net
  template:
    src: "{{ role_path }}/files/lxc-net"
    dest: /etc/default/lxc-net
    mode: 0644
  become: true

- include: start_nodes.yml

- name: Pause n seconds for nodes to get ip address reservations
  pause:
    seconds: "{{ lxc_running.stdout_lines | difference(nodes) | length }}"

- name: Update master_nodes with ip addresses
  set_fact:
    master_nodes: |
      {{ master_nodes | combine({
          item.key: {
            'ansible_host': lookup('dig', item.value.fqdn + '.', '@' + phys_intf_ip )
          }
        }, recursive=True)
      }}
  with_dict: "{{ master_nodes }}"

- name: Update worker_nodes with ip addresses
  set_fact:
    worker_nodes: |
      {{ worker_nodes | combine({
          item.key: {
            'ansible_host': lookup('dig', item.value.fqdn + '.', '@' + phys_intf_ip )
          }
        }, recursive=True)
      }}
  with_dict: "{{ worker_nodes }}"

- name: Redefine nodes to include the updated worker and master node configs
  set_fact:
    nodes: "{{ master_nodes | combine(worker_nodes, recursive=True) }}"

- name: Check validity of node ip addresses
  assert:
    that: item.value.ansible_host | ipaddr
  with_dict: "{{ nodes }}"

- name: Detect node users
  shell: "lxc-attach -n {{ item.value.fqdn }} -- bash -c 'cut -d: -f1 /etc/shadow'"
  register: node_users_output
  with_dict: "{{ nodes }}"
  become: true

- name: Define node_users
  set_fact:
    node_users: |
      {{ node_users | default({}) | combine({
          result.item.value.fqdn: result.stdout_lines | unique
        })
      }}
  with_items: "{{ node_users_output.results }}"
  loop_control:
    loop_var: result

- name: Create sudo user for nodes
  shell: |
    lxc-attach -n {{ item.value.fqdn }} -- \
      useradd --create-home --groups sudo --shell /bin/bash {{ item.value.ansible_user }};
  with_dict: "{{ nodes }}"
  when: item.value.ansible_user not in node_users[item.value.fqdn]
  become: true

- name: Disable password verification for users in sudo group
  replace:
    path: "{{ item.value.rootfs }}/etc/sudoers"
    regexp: '^(%sudo\s+ALL=\(ALL:ALL\))\s(ALL)$'
    replace: '\1 NOPASSWD: \2'
  with_dict: "{{ nodes }}"
  become: true

- name: Run bootstrap commands inside nodes
  shell: |
    lxc-attach -n {{ item.value.fqdn }} -- bash -c "\
      apt-get update \
      && apt-get upgrade -y \
      && apt-get install -y --no-install-recommends \
        libsasl2-dev \
        libssl-dev \
        openssh-server \
        python-minimal \
        python-pkg-resources \
        python-pip \
        python-setuptools"
  with_dict: "{{ nodes }}"
  become: true

- include: ssh_auth.yml
- include: add_hosts.yml
